name: Kanvaro CI CD pipeline Main(Develop) Environment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: write # Needed to create releases, update tags, etc.
  packages: write # Needed for publishing to GitHub Packages (docker/npm)
  id-token: write # Needed for OIDC deployments (e.g., cloud auth)

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Starting action
        run: echo "starting pipeline"

  semantic-release:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.14.0
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install --save-dev @semantic-release/changelog

      - name: Run Semantic Release
        id: set-version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACESS_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_ACESS_TOKEN }}@github.com/EchonLabs/kanvaro.com.git
          RELEASE_OUTPUT=$(npx semantic-release || true)
          echo "$RELEASE_OUTPUT"
          VERSION=$(echo "$RELEASE_OUTPUT" | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [ -n "$VERSION" ]; then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Version detected: $VERSION"
          else
            echo "version=" >> $GITHUB_OUTPUT
            echo "No new release was created."
          fi

  build_main:
    runs-on: ubuntu-latest
    environment: main
    needs: semantic-release
    outputs:
      version: ${{ steps.image-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set VERSION from release or package.json
        id: image-version
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "No semantic-release version found, using version from package.json"
            VERSION=$(jq -r .version package.json)
          fi
          echo "Using version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Sanitize Branch Name
        id: sanitize-branch
        run: |
          SAFE_BRANCH=$(echo "${{ github.ref_name }}" | tr '/' '-')
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT
          echo "BRANCH_TAG=$SAFE_BRANCH" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Environment Name
        run: echo "CI_ENVIRONMENT_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_OWNER="$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')"
          IMAGE_REPO="$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')"
          ENV_NAME="$(echo "$CI_ENVIRONMENT_NAME" | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9-' '-')"

          IMAGE_NAME="ghcr.io/${IMAGE_OWNER}/${IMAGE_REPO}"

          if [ -n "$ENV_NAME" ]; then
            IMAGE_NAME="${IMAGE_NAME}-${ENV_NAME}"
          fi

          IMAGE_NAME="${IMAGE_NAME%-}"

          echo "Final IMAGE_NAME: $IMAGE_NAME"

          IMAGE_TAG=${GITHUB_SHA::7}

          echo "Building image $IMAGE_NAME:${{ needs.build_main.outputs.version }}"
          docker build -t $IMAGE_NAME:${VERSION} .

          echo "Pushing image to GHCR"
          docker push $IMAGE_NAME:${VERSION}

          # Optionally, push 'latest' tag
          docker tag $IMAGE_NAME:${VERSION} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  deploy_main:
    runs-on: ubuntu-latest
    environment: main
    needs: build_main
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Set Environment Name
        run: echo "CI_ENVIRONMENT_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Deploy to Server (Main Environment)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Received version: ${{ needs.build_main.outputs.version }}"
            cd /var/www/
            ./${{ vars.DEPLOY_SCRIPT }} \
              -v "${{ needs.build_main.outputs.version }}" \
              -w "${{ vars.CONTAINER_TAG }}-web-${{ env.CI_ENVIRONMENT_NAME }}" \
              -u "${{ github.actor }}" \
              -p "${{ secrets.Kanvaro_Deploy_Key }}" \
              -l "/var/www/${{ vars.DEPLOY_PATH }}" \
              -r "${{ vars.REGISTRY_PATH }}" \
              -e "${{ env.CI_ENVIRONMENT_NAME }}" \
              -x "ghcr.io/${{ github.repository }}-${{ env.CI_ENVIRONMENT_NAME }}:${{ needs.build_dev.outputs.version }}" \
              -y "$IMAGE"
        env:
          CONTAINER_TAG: ${{ vars.CONTAINER_TAG }}
          REGISTRY_PATH: ${{ vars.REGISTRY_PATH }}
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          DEPLOY_SCRIPT: ${{ vars.DEPLOY_SCRIPT }}