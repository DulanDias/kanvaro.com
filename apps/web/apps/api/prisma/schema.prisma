// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  passwordHash String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  sessions     Session[]
  projects     Project[]
  tasks        Task[]
  timeLogs     TimeLog[]
  notifications Notification[]
  comments     Comment[]

  @@map("users")
}

model Session {
  id              String    @id @default(cuid())
  userId          String
  createdAt       DateTime  @default(now())
  expiresAt       DateTime
  ipHash          String
  userAgentHash   String
  refreshTokenHash String

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String

  // Relations
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  boards      Board[]
  sprints     Sprint[]
  tasks       Task[]
  timeLogs    TimeLog[]
  comments    Comment[]

  @@map("projects")
}

model Board {
  id          String    @id @default(cuid())
  name        String
  description String?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns     Column[]
  tasks       Task[]

  @@map("boards")
}

model Column {
  id          String    @id @default(cuid())
  name        String
  orderKey    String    @default("0|000000")
  boardId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("columns")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  orderKey    String    @default("0|000000")
  columnId    String
  projectId   String
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?     @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  timeLogs    TimeLog[]
  comments    Comment[]

  @@map("tasks")
}

model Sprint {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("PLANNED") // PLANNED, ACTIVE, CLOSED
  startDate   DateTime?
  endDate     DateTime?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("sprints")
}

model TimeLog {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // in minutes
  billable    Boolean   @default(false)
  userId      String
  taskId      String
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  userId      String
  taskId      String?
  projectId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Notification {
  id          String    @id @default(cuid())
  type        String
  title       String
  body        String?
  link        String?
  readAt      DateTime?
  userId      String
  taskId      String?
  projectId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String?
  metadata    Json?
  createdAt   DateTime  @default(now())

  @@map("audit_logs")
}
